{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","components/CountryPicker/CountryPicker.js","components/Charts/Charts.js","App.js","serviceWorker.js","index.js","App.module.css","components/Charts/Charts.module.css"],"names":["module","exports","container","card","infected","recovered","deaths","Cards","props","console","log","data","react_default","a","createElement","className","styles","Grid","spacing","justify","alignItems","style","margin","item","xs","md","component","Card","cx","CardContent","Typography","color","gutterBottom","variant","build_default","start","end","confirmed","value","duration","separator","Date","lastUpdate","toDateString","CountryPicker","_ref","dataTransferHandler","_useState","useState","_useState2","Object","slicedToArray","setUrl","_useState3","_useState4","countries","setCountries","_useState5","_useState6","setData","_useState7","_useState8","dat","setDat","useEffect","axios","get","then","res","catch","err","concat","FormControl","NativeSelect","defaultValue","onChange","event","country","target","map","c","key","name","Charts","barChart","es","labels","datasets","label","backgroundColor","options","legend","display","title","text","App","src","alt","width","marginTop","components_Cards_Cards","components_CountryPicker_CountryPicker","prop","components_Charts_Charts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.497dc2e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3KEXW\",\"card\":\"Cards_card__3oZGt\",\"infected\":\"Cards_infected__2tj2s\",\"recovered\":\"Cards_recovered__Tu-lv\",\"deaths\":\"Cards_deaths__1R_tq\"};","import React, {useEffect, useState} from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { CardContent } from '@material-ui/core';\r\nimport { Typography } from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nimport axios from 'axios';\r\n\r\nconst Cards = props => {\r\n\r\n\r\n    console.log(props.data);  //getting data here but not in JSX\r\n\r\n\r\n    if (!props.data) {\r\n        return <h1>Loading....</h1>\r\n    }\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n        <Grid container spacing={1} justify=\"center\" alignItems=\"center\" style={{ margin: \"3.5% 0\" }}>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">                        \r\n                        <CountUp start={0} end={props.data.confirmed.value} duration={2.75} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(props.data.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            Number of active cases of COVID-19.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)} >\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                        <CountUp start={0} end={props.data.recovered.value} duration={2.75} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(props.data.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                        Number of recoveries from COVID-19.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                        <CountUp start={0} end={props.data.deaths.value} duration={2.75} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                        {new Date(props.data.lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                        Number of deaths caused by COVID-19.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import React, {useState, useEffect} from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport axios from 'axios';\r\n\r\nconst CountryPicker = ({ dataTransferHandler}) => {\r\n\r\n    let [url, setUrl] = useState();\r\n    let [countries, setCountries] = useState([]);\r\n    let [data, setData] = useState();\r\n    const [dat, setDat] = useState();\r\n\r\n    useEffect(\r\n        () => {\r\n        axios.get('https://covid19.mathdro.id/api/countries')\r\n            .then((res) => {\r\n                setCountries(res.data.countries)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n            setUrl('https://covid19.mathdro.id/api')\r\n            axios.get('https://covid19.mathdro.id/api')\r\n                .then((res) => {\r\n                    setData(res.data)\r\n                    console.log(res.data)\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })}\r\n            , []\r\n    )\r\n\r\n    const usedlog = country => {\r\n        setDat(country);\r\n        console.log(country)\r\n    }\r\n\r\n    console.log(dat);\r\n    \r\n    dataTransferHandler(data);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n      axios.get(`https://covid19.mathdro.id/api/countries/${dat}`)\r\n                .then((res) => {\r\n                    setData(res.data)\r\n                    console.log(res.data)\r\n                })\r\n                .catch((err) => {\r\n                    console.log(err)\r\n                })\r\n\r\n    }, [dat]);\r\n\r\n    return (\r\n        <div>\r\n        <FormControl>\r\n            <NativeSelect defaultValue=\"\" onChange={(event) => usedlog(event.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {countries.map((c) => <option key={c.name} value={c.name}>{c.name}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CountryPicker;","import React, { useEffect, useState } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = props => {\r\n\r\n    const barChart = (\r\n        props.data ? (\r\n            <Bar\r\n                data={{\r\n                    labels: ['Infected', 'Recovered', 'Deaths'],\r\n                    datasets: [\r\n                        {\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                            data: [props.data.confirmed.value, props.data.recovered.value, props.data.deaths.value],\r\n                        },\r\n                    ],\r\n                }}\r\n                options={{\r\n                    legend: { display: false },\r\n                    title: { display: true, text: `Current state in ANY` },\r\n                }}\r\n            />\r\n        ) : <h1>Not avil</h1>\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {barChart}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Charts;","import React, { useEffect, useState } from 'react';\n\nimport styles from './App.module.css';\n\nimport Cards from './components/Cards/Cards';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport Charts from './components/Charts/Charts';\n \nconst App = () => {\n\n  const [dat, setDat] = useState();\n\n  let dataTransferHandler = prop => {\n    setDat(prop);\n  }\n\n  console.log(dat);\n\n  return (\n    <div className={styles.container}>\n      <img src={\"https://covid19statswebsite.netlify.app/static/media/image.d7265326.png\"} alt={\"Covid Banner\"} width=\"370px\" style={{marginTop: \"80px\"}}/>\n      <Cards data={dat} />\n      <CountryPicker dataTransferHandler={dataTransferHandler} />\n      <Charts data={dat} />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3HMvV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__28AHq\"};"],"sourceRoot":""}